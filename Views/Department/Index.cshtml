@model IEnumerable<Department>
@{
    Layout = "_Layout";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background-color: #212529
        }

        th {
            color: white;
        }

        table.center {
            margin-left: auto;
            margin-right: auto;
        }

        td,th {
            text-align: center;
        }
    </style>
</head>
<body>

    <form asp-controller="Department" asp-action="Search">
        <div class="input-group">
            <input style="margin-left:70%" name="item" type="search" class="form-control rounded" placeholder="Search by Name" aria-label="Search" aria-describedby="search-addon" />
            <button type="submit" class="btn btn-outline-primary">search</button>
        </div>
    </form>

    <div style="text-align:center; margin:10px 10px">
        <a asp-action="create" asp-controller="department" class="btn btn-warning"> Add Department 
            <span class="badge bg-info">@Model.Count() </span>
        </a>
    </div> 
   



    <table id="myTable2" class="table table-striped table-dark table-hover table-bordered ">
        <thead class="thead-dark">
            <tr>
                <th scope="col">ID</th>
                <th scope="col">
                    <button onclick="sortTable(0)" class="btn btn-dark sortable-button">Name</button>
                </th>
                <th scope="col">Operation</th>
            </tr>
        </thead>

        @foreach (var item in Model)
        {
            <tr>
                <th scope="row">@item.Id</th>
                <td>@item.Name</td>
                <td>
                        <a asp-action="details" asp-controller="department" asp-route-id="@item.Id" class="btn btn-info"> Details </a>
                        <a asp-action="delete" asp-controller="department" asp-route-id="@item.Id" onclick="return confirm('Are You Sure?')" class="btn btn-danger"> Delete </a>
                        <a asp-action="update" asp-controller="department" asp-route-id="@item.Id" class="btn btn-primary"> Update </a>
                </td>
            </tr>

        }

    </table>
    <script>
        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("myTable2");
            switching = true;
            // Set the sorting direction to ascending:
            dir = "asc";
            /* Make a loop that will continue until
            no switching has been done: */
            while (switching) {
                // Start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /* Loop through all table rows (except the
                first, which contains table headers): */
                for (i = 1; i < (rows.length - 1); i++) {
                    // Start by saying there should be no switching:
                    shouldSwitch = false;
                    /* Get the two elements you want to compare,
                    one from current row and one from the next: */
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    /* Check if the two rows should switch place,
                    based on the direction, asc or desc: */
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /* If a switch has been marked, make the switch
                    and mark that a switch has been done: */
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /* If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again. */
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>
</body>
</html>
